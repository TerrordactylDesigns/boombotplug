{
  "name": "plugapi",
  "version": "0.3.0",
  "author": {
    "name": "Chris Vickery",
    "email": "chrisinajar@gmail.com"
  },
  "contributors": [
    {
      "name": "ging"
    }
  ],
  "description": "Generic API for building Plug.dj bots",
  "main": "./src/index.js",
  "lib": "./src/index.js",
  "dependencies": {
    "coffee-script": "*",
    "node-uuid": "*",
    "node-html-encoder": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chrisinajar/plugapi"
  },
  "license": "freeBSD",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "plugapi\r\n=======\r\n\r\nA generic API for creating Plug.dj bots\r\n\r\n\r\n## How to use\r\nJust grab it from npm, or optionally use the lastest version for github\r\n\r\n```\r\nnpm install plugapi\r\n```\r\n\r\nTo connect, do this!\r\n\r\n```\r\nvar AUTH = 'xxxxxxxxxxxxxxxxxxxxxxxxxxx=?_expires=xxxxxxxxxxxxxxxxxx==&user_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx='; // Put your auth token here, it's the cookie value for usr\r\nvar ROOM = 'coding-soundtrack';\r\n\r\nvar bot = new PlugAPI(AUTH);\r\nbot.connect();\r\n\r\nbot.on('connected', function() {\r\n\tbot.joinRoom('coding-soundtrack');\r\n})\r\n```\r\n\r\nYou can also pass the room directly to connect to save SO MUCH TIME\r\n```\r\nbot.connect(ROOM);\r\n```\r\n\r\n##Examples\r\nHere are some bots using this API. Check out how they did it!\r\n\r\n* https://github.com/chrisinajar/roboJar-plug\r\n* https://github.com/martindale/snarl\r\n\r\nHave a bot that uses the API? Let me know!\r\n\r\n## Events\r\nYou can listen on essentially any event that plug emits. Many of the events also emit an alias event named after the ttapi version\r\n```\r\n// basic chat handler to show incoming chats formatted nicely\r\nbot.on('chat', function(data) {\r\n\tif (data.type == 'emote')\r\n\t\tconsole.log(data.from+data.message)\r\n\telse\r\n\t\tconsole.log(data.from+\"> \"+data.message)\r\n})\r\n```\r\n\r\nHere's an example for automatic reconnecting on errors / close events!\r\n```\r\nvar reconnect = function() { bot.connect('coding-soundtrack'); };\r\n\r\nbot.on('close', reconnect);\r\nbot.on('error', reconnect);\r\n```\r\n\r\nHere's a list of events:\r\n\r\n####\tchat\r\n```\r\ndata:\r\n\tfromID: 'user id'\r\n\tmessage: 'message text'\r\n\tfrom: 'username'\r\n\ttype: 'message type'\r\n\tchatID: 'chat id'\r\ntype: 'chat'\r\n```\r\nExample:\r\n```\r\n{ data: \r\n   { fromID: 'xxxxxxxxxxxxxxxxxxxxxxxx',\r\n     message: 'hello world',\r\n     from: 'mnme',\r\n     type: 'message',\r\n     chatID: 'xxxxxxxxxx' },\r\n  type: 'chat' }\r\n```\r\n####\tuserLeave\r\n```\r\ndata:\r\n\tid: 'user id'\r\ntype: 'userLeave'\r\n```\r\nExample:\r\n```\r\n{ data: { id: 'xxxxxxxxxxxxxxxxxxxxxxxx' }, type: 'userLeave' }\r\n```\r\n\r\n####\tuserJoin\r\n```\r\ndata:\r\n\tusername: 'username'\r\n\tstatus: 0/1/2/3/4/5\r\n\tfans: fans\r\n\tlistenerPoints: points from listeners\r\n\tlanguage: 'language'\r\n\tavatarID: 'bud03'\r\n\tid: 'xxxxxxxxxxxxxxxxxxxxxxxx'\r\n\tcuratorPoints: points from curators\r\n\tdjPoints: points from DJing\r\ntype: 'userJoin'\r\n```\r\nExample:\r\n```\r\n{ data: \r\n   { username: 'mnme',\r\n     status: 0,\r\n     fans: 3,\r\n     listenerPoints: 164,\r\n     language: 'en',\r\n     avatarID: 'bud03',\r\n     id: 'xxxxxxxxxxxxxxxxxxxxxxxx',\r\n     curatorPoints: 0,\r\n     djPoints: 76 },\r\n  type: 'userJoin' }\r\n```\r\n\r\n####\tuserUpdate\r\n```\r\nsorry, only saw one time :(\r\n```\r\n\r\n####\tvoteUpdate\r\n```\r\ndata:\r\n\tvote: 1/0\r\n\tid: 'user id'\r\ntype: 'voteUpdate'\r\n```\r\nExample:\r\n```\r\n{ data: { vote: 1, id: 'user id' },\r\n  type: 'voteUpdate' }\r\n```\r\n\r\n####\tcurateUpdate\r\n```\r\ndata:\r\n\tid: 'user id' \r\n\ttype: 'curateUpdate'\r\n```\r\nExample:\r\n```\r\n{ data: { id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },\r\n  type: 'curateUpdate' }\r\n```\r\n\r\n####\tdjAdvance\r\n```\r\ndata:\r\n\tcurrentDJ: 'user id'\r\n\tdjs: [ [Object], [Object], [Object], [Object], [Object] ]\r\n\tmediaStartTime: 'start time'\r\n\tmedia: \r\n\t\ttitle: 'song title'\r\n\t\tformat: 'x'\r\n\t\tauthor: 'song author'\r\n\t\tcid: 'xxxxxxxx'\r\n\t\tduration: duration in seconds\r\n\t\tid: 'format:cid'\r\n\tplaylistID: 'playlist id'\r\n\tearn: true/false\r\n\thistoryID: 'id for song history'\r\ntype: 'djAdvance'\r\n```\r\nExample:\r\n```\r\n{ data: \r\n   { currentDJ: 'xxxxxxxxxxxxxxxxxxxxxxxx',\r\n     djs: [ [Object], [Object], [Object], [Object], [Object] ],\r\n     mediaStartTime: '2012-11-28 21:12:28.674382',\r\n     media: \r\n      { title: 'Freefire - Dataloss (Darth & Vader Remix)',\r\n        format: 'x',\r\n        author: 'Mateus Rossetto',\r\n        cid: 'xxxxxxxx',\r\n        duration: 332.935,\r\n        id: 'x:xxxxxxxx' },\r\n     playlistID: 'xxxxxxxxxxxxxxxxxxxxxxxx',\r\n     earn: true,\r\n     historyID: 'xxxxxxxxxxxxxxxxxxxxxxxx' },\r\n  type: 'djAdvance' }\r\n```\r\n\r\n####\tdjUpdate\r\n```\r\ndata: \r\n\tplays: times the dj played a song, id: 'user id'\r\n\tplays: times the dj played a song, id: 'user id'\r\n\tplays: times the dj played a song, id: 'user id'\r\n\tplays: times the dj played a song, id: 'user id'\r\n    plays: times the dj played a song, id: 'user id'\r\ntype: 'djUpdate'\r\n```\r\nExample:\r\n```\r\n{ data: \r\n   [ { plays: 2, id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },\r\n     { plays: 13, id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },\r\n     { plays: 7, id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },\r\n     { plays: 10, id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },\r\n     { plays: 0, id: 'xxxxxxxxxxxxxxxxxxxxxxxx' } ],\r\n  type: 'djUpdate' }\r\n```\r\n\r\n## Actions\r\nThere aren't that many functions implemented yet, and I'm too lazy to document each one yet (HALP?)....\r\n\r\nHere's a list:\r\n####\tconnect: ([roomName])\r\n####\tjoinRoom: (name, [, callback:fn ])\r\n####\tchat: (msg)\r\n####\twoot: ([ callback:fn ])\r\n####\tmeh: ([ callback:fn ])\r\n####\tvote: (updown, [, callback:fn ])\r\n####\tchangeRoomInfo: (name, description, [, callback:fn ])\r\n####\tchangeRoomOptions: (boothLocked, waitListEnabled, maxPlays, maxDJs, [, callback:fn ])\r\n####\tjoinBooth: ([ callback:fn ])\r\n####\tleaveBooth: ([ callback:fn ])\r\n####\tremoveDj: (userid [, callback:fn ])\r\n####\tskipSong: ([ callback:fn ])\r\n\r\n##Misc\r\n\r\n#### setLogObject(logger)\r\nYou can set your own custom logger for the API to use when it logs important events, such as errors or stack traces from the server.\r\n\r\nThe logger object must have a function called \"log\" that takes any number of parameters and prints them.\r\n\r\n```\r\nvar prompt = new Prompt();\r\nbot.setLogObject(prompt);\r\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chrisinajar/plugapi/issues"
  },
  "homepage": "https://github.com/chrisinajar/plugapi",
  "_id": "plugapi@0.3.0",
  "dist": {
    "shasum": "35f5b5dabf1d6d97bab734321e6540e24db38a60"
  },
  "_from": "plugapi@latest",
  "_resolved": "https://registry.npmjs.org/plugapi/-/plugapi-0.3.0.tgz"
}
